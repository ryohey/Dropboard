// Generated by CoffeeScript 1.10.0
var Dropboard, Plugin, Port, Watcher, ejs, express, fs, partials, path, request, socket,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

express = require(__dirname + "/node_modules/express");

request = require(__dirname + "/node_modules/request");

socket = require(__dirname + "/node_modules/socket.io");

ejs = require(__dirname + "/node_modules/ejs");

path = require(__dirname + "/node_modules/path");

partials = require(__dirname + "/node_modules/express-partials");

Watcher = require(__dirname + "/helpers/watcher");

Port = require(__dirname + "/helpers/port");

Plugin = require(__dirname + "/helpers/plugin");

fs = require("fs");

Dropboard = (function() {
  function Dropboard(config) {
    this.initApp = bind(this.initApp, this);
    this.initPlugin = bind(this.initPlugin, this);
    this.initServer = bind(this.initServer, this);
    this.bindRestart = bind(this.bindRestart, this);
    this.run = bind(this.run, this);
    this.makeDataDir = bind(this.makeDataDir, this);
    this.config = config;
    this.makeDataDir(this.config.paths.data);
    this.app = this.initApp();
    this.server = this.initServer();
    this.initPlugin();
    this.bindRestart();
  }

  Dropboard.prototype.makeDataDir = function(dataPath) {
    console.log(dataPath);
    if (!fs.existsSync(dataPath)) {
      return fs.mkdirSync(dataPath, "757");
    }
  };

  Dropboard.prototype.run = function() {
    var port;
    port = (new Port(50000, __dirname)).port;
    this.server.listen(port);
    return this.url = "http://localhost:" + port + "/";
  };

  Dropboard.prototype.bindRestart = function() {
    return process.on('uncaughtException', (function(_this) {
      return function(err) {
        console.log(err);
        if (err.errno === 'EADDRINUSE') {
          return request(_this.url + "exit", function(error, response, body) {
            console.log("restart");
            return _this.run();
          });
        }
      };
    })(this));
  };

  Dropboard.prototype.initServer = function() {
    var io, server, watcher;
    server = require('http').createServer(this.app);
    io = socket.listen(server);
    watcher = new Watcher(io, this.config.paths.data);
    watcher.start();
    return server;
  };

  Dropboard.prototype.initPlugin = function() {
    return new Plugin().init(this.config.paths.plugins, this, this.app, express);
  };

  Dropboard.prototype.initApp = function() {
    var app;
    app = express();
    app.use(require('connect').bodyParser());
    app.use(partials());

    /* Template Setting */
    app.engine('.html', ejs.__express);
    app.set('view engine', 'ejs');
    app.set('views', this.config.paths.views);

    /* localhost以外からのアクセスは400で応答 */
    app.use(function(req, res, next) {
      var hostname, ref;
      hostname = req.headers.host;
      if ((hostname != null ? (ref = hostname.match(/^localhost/)) != null ? ref.length : void 0 : void 0) != null) {
        return next();
      } else {
        return res.send(400);
      }
    });

    /* Root API */
    app.get("/exit", function(req, res) {
      console.log("httpからサーバーが終了されました");
      return process.exit(0);
    });
    return app;
  };

  return Dropboard;

})();

module.exports = Dropboard;
