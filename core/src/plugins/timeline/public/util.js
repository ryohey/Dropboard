// Generated by CoffeeScript 1.3.3
var formatMessage, isAudio, isFileType, isImage, isTwitter, isYoutube, isYoutubeDomain, messageDiff, naturalFormatDate, parseURL, sortByDate, to2keta, twitterExp, youtubeDomainExp, youtubeExp;

sortByDate = function(a, b) {
  var ax, bx;
  if (!a) {
    return -1;
  } else {
    if (!b) {
      return 1;
    }
  }
  ax = (new Date(a.date)).getTime();
  bx = (new Date(b.date)).getTime();
  ax = (ax ? ax : 0);
  bx = (bx ? bx : 0);
  return ax - bx;
};

messageDiff = function(before, after) {
  var added, isExist;
  added = [];
  isExist = function(that) {
    var flag;
    flag = false;
    $.each(before, function() {
      if (this.date === that.date && this.text === that.text && this.name === that.name) {
        flag = true;
      }
    });
    return flag;
  };
  $.each(after, function() {
    if (!isExist(this)) {
      return added.push(this);
    }
  });
  return added;
};

parseURL = function(url) {
  var data, hostname, scheme, slashes;
  data = void 0;
  hostname = void 0;
  scheme = void 0;
  slashes = void 0;
  slashes = url.split("/");
  data = {};
  if (slashes.length > 0) {
    scheme = slashes[0].match(/.+?:/);
    data.scheme = (scheme != null ? scheme[0].replace(":", "") : void 0);
    hostname = url.replace(data.scheme + "://", "").match(/^.+?\//);
    data.hostname = (hostname != null ? hostname[0].replace(/\//, "") : void 0);
    if (!url.match(/\/$/)) {
      data.fileName = slashes[slashes.length - 1];
      data.extension = data.fileName.replace(/^.+?\./, "");
    }
  }
  return data;
};

isFileType = function(file, extensions) {
  var ext, flag;
  ext = parseURL(file).extension;
  flag = false;
  $.each(extensions, function(val, key) {
    if (ext === key || ext === key.toUpperCase()) {
      flag = true;
      return false;
    }
  });
  return flag;
};

isImage = function(file) {
  return isFileType(file, ["jpg", "jpeg", "png", "gif"]);
};

isAudio = function(file) {
  return isFileType(file, ["mp3", "ogg", "wav"]);
};

youtubeDomainExp = /https?\:\/\/www\.youtube\.com.*/g;

isYoutubeDomain = function(url) {
  if (url.match(youtubeDomainExp)) {
    return true;
  } else {
    return false;
  }
};

youtubeExp = /https?\:\/\/www\.youtube\.com\/watch\?v\=([a-zA-Z0-9_-]+).*/g;

isYoutube = function(url) {
  if (url.match(youtubeExp)) {
    return true;
  } else {
    return false;
  }
};

twitterExp = /https?\:\/\/twitter\.com.*/g;

isTwitter = function(url) {
  if (url.match(twitterExp)) {
    return true;
  } else {
    return false;
  }
};

to2keta = function(val) {
  if (val < 10) {
    return "0" + val;
  } else {
    return val;
  }
};

naturalFormatDate = function(date) {
  return date.getFullYear() + "/" + to2keta(date.getMonth() + 1) + "/" + to2keta(date.getDate()) + " " + to2keta(date.getHours()) + ":" + to2keta(date.getMinutes());
};

formatMessage = function(str) {
  var h, hashPattern, replaceTwitter, replaceURL, replaceYoutube, urlPattern;
  hashPattern = /(?:^|[^ｦ-ﾟー゛゜々ヾヽぁ-ヶ一-龠ａ-ｚＡ-Ｚ０-９a-zA-Z0-9&_\/]+)[#＃]([ｦ-ﾟー゛゜々ヾヽぁ-ヶ一-龠ａ-ｚＡ-Ｚ０-９a-zA-Z0-9_]*[ｦ-ﾟー゛゜々ヾヽぁ-ヶ一-龠ａ-ｚＡ-Ｚ０-９a-zA-Z]+[ｦ-ﾟー゛゜々ヾヽぁ-ヶ一-龠ａ-ｚＡ-Ｚ０-９a-zA-Z0-9_]*)/g;
  urlPattern = /(https?:\/\/[a-zA-Z0-9;\/?:@&=\+$,\-_\.!~*'\(\)%#]+)/g;
  h = function(str) {
    return $("<div/>").text(str).html();
  };
  replaceURL = function(str) {
    var urls;
    urls = str.match(urlPattern);
    if (urls) {
      $.each(urls, function(index, value) {
        if (!isYoutubeDomain(value) && !isTwitter(value)) {
          return str = str.replace(value, "<a href=\"" + value + "\" target=\"_blank\">" + value + "</a>");
        }
      });
    }
    return str;
  };
  replaceTwitter = function(str) {
    str = " " + str;
    str = str.replace(/([^\w])\@([\w\-]+)/g, "$1@<a href=\"http://twitter.com/$2\" target=\"_blank\">$2</a>");
    str = str.replace(hashPattern, " <a href=\"http://twitter.com/search?q=%23$2\" target=\"_blank\">#$1</a>");
    return str;
  };
  replaceYoutube = function(str) {
    var iframes, urls;
    urls = str.match(urlPattern);
    iframes = [];
    if (urls) {
      $.each(urls, function(index, value) {
        var elm, src;
        if (isYoutube(value)) {
          src = value.replace(youtubeExp, "http://www.youtube.com/embed/$1");
          elm = $("<div/>").addClass("video").append($("<iframe/>").attr({
            width: "640",
            height: "360",
            src: src,
            frameborder: "0",
            allowfullscreen: "true"
          }));
          return iframes.push({
            url: value,
            html: elm.wrap("<div>").parent().html()
          });
        }
      });
      $.each(iframes, function(index, value) {
        return str = str.replace(value.url, value.html);
      });
    }
    return str;
  };
  return replaceURL(replaceTwitter(replaceYoutube(h(str))));
};
