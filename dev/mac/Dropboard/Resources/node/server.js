// Generated by CoffeeScript 1.3.3
var DATA_PATH, PUBLIC_PATH, UPLOAD_PATH, app, checkPort, dir, dirs, exec, express, fs, getFiles, isSet, os, port, request, shorten, sortByDate, url, _i, _len;

express = require("express");

fs = require("fs");

os = require("os");

request = require("request");

/* teisuu
*/


DATA_PATH = "../../../../data/";

UPLOAD_PATH = "../../../../uploads/";

PUBLIC_PATH = "../public/";

/* app
*/


app = express();

app.use(require("connect").bodyParser());

app.use("/", express["static"](__dirname + "/" + PUBLIC_PATH));

app.use("/uploads", express["static"](__dirname + "/" + UPLOAD_PATH));

/* データディレクトリがない場合は作成
*/


dirs = [DATA_PATH, UPLOAD_PATH];

for (_i = 0, _len = dirs.length; _i < _len; _i++) {
  dir = dirs[_i];
  try {
    fs.statSync(dir);
  } catch (e) {
    fs.mkdirSync(dir, "777");
  }
}

/* 内部で使う関数
*/


getFiles = function(dataPath) {
  var files, list;
  files = fs.readdirSync(dataPath);
  list = [];
  files.forEach(function(fileName) {
    var data, file;
    if (fileName.match(/.+\.json/)) {
      file = fs.readFileSync(dataPath + fileName) + "";
      if (file) {
        data = null;
        try {
          data = JSON.parse(file);
        } catch (e) {
          console.log(e);
        }
        if (data) {
          return list.push(data);
        }
      }
    }
  });
  return list;
};

isSet = function(arg) {
  return (arg != null) && arg !== "";
};

shorten = function(str, length) {
  var postfix, s;
  s = str.replace(/\n|\\|\/|\:|\*|\?|\"|\<|\>|\|/g, "");
  postfix = "...";
  if (s.length > length) {
    if (length > postfix.length) {
      return s.slice(0, length - postfix.length) + postfix;
    } else {
      return s.slice(0, length);
    }
  } else {
    return s;
  }
};

sortByDate = function(a, b) {
  var ax, bx;
  if (!a) {
    return -1;
  } else if (!b) {
    return 1;
  }
  ax = (new Date(a.date)).getTime();
  bx = (new Date(b.date)).getTime();
  if (ax == null) {
    ax = 0;
  }
  if (bx == null) {
    bx = 0;
  }
  return ax - bx;
};

/* API
*/


app.post("/upload", function(req, res) {
  var files, saved;
  files = req.files.files;
  if (typeof files.forEach !== 'function') {
    files = [files];
  }
  saved = [];
  files.forEach(function(file) {
    var data, newPath;
    data = fs.readFileSync(file.path);
    if (data) {
      newPath = __dirname + "/" + UPLOAD_PATH + file.name;
      fs.writeFileSync(newPath, data);
      console.log("saved:" + file.name);
      return saved.push(UPLOAD_PATH + file.name);
    }
  });
  return res.send(JSON.stringify(saved));
});

app.post("/write", function(req, res) {
  var data;
  data = req.body;
  if (isSet(data.name) && isSet(data.date) && isSet(data.text)) {
    return fs.writeFile(DATA_PATH + shorten(data.name, 10) + "「" + shorten(data.text, 20) + "」" + ".json", JSON.stringify(data), function(err) {
      if (err) {
        return res.send("0");
      } else {
        return res.send("1");
      }
    });
  }
});

app.get("/page/:page/:per", function(req, res) {
  var end, files, page, per, sliced, start;
  files = getFiles(DATA_PATH);
  files.sort(sortByDate);
  page = parseInt(req.params.page);
  per = parseInt(req.params.per);
  start = Math.max(files.length - (page + 1) * per, 0);
  end = Math.max(files.length - page * per, 0);
  sliced = files.slice(start, end);
  return res.send(JSON.stringify(sliced));
});

app.get("/read", function(req, res) {
  return res.send(JSON.stringify(getFiles(DATA_PATH)));
});

app.get("/exit", function(req, res) {
  console.log("httpからサーバーが終了されました");
  return process.exit(0);
});

/* ポート番号の設定
*/


checkPort = function() {
  var default_port, detected, dirToPortString, exists, file, lines, port, portDirString, portfile, runtime_dir, separator;
  dirToPortString = function(port) {
    return runtime_dir + separator + port + "\n";
  };
  portfile = os.tmpDir() + "/.dropboard.port";
  runtime_dir = __dirname;
  default_port = 50000;
  port = default_port;
  separator = "::";
  detected = false;
  exists = fs.existsSync(portfile);
  if (exists) {
    file = fs.readFileSync(portfile, "utf-8");
    lines = file.split("\n");
    lines.forEach(function(line) {
      var pear;
      pear = line.split(separator);
      if (pear.length === 2 && pear[0] === runtime_dir) {
        port = Number(pear[1]);
        return detected = true;
      }
    });
    if (!detected) {
      port = default_port + lines.length;
    }
  }
  portDirString = runtime_dir + separator + port + "\n";
  if (!detected || !exists) {
    fs.appendFileSync(portfile, portDirString, "utf-8");
  }
  return port;
};

port = checkPort();

url = "http://localhost:" + port + "/";

process.on('uncaughtException', function(err) {
  if (err.errno === 'EADDRINUSE') {
    return request(url + "exit", function(error, response, body) {
      return app.listen(port);
    });
  }
});

app.listen(port);

exec = require("child_process");

switch (os.type()) {
  case "Darwin":
    exec.exec("open " + url);
    break;
  case "Windows_NT":
    exec.exec("start " + url);
}

console.log(url);
