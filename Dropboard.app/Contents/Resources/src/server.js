// Generated by CoffeeScript 1.3.3
/* bright modules
*/

var Calendar, Index, Log, Note, Port, Timeline, Upload, Watcher, app, calendar, config, ejs, express, fs, index, io, isDevelopMode, key, log, note, partials, path, port, request, server, socket, startListen, timeline, upload, url, value, watcher, _ref;

express = require(__dirname + "/node_modules/express");

request = require(__dirname + "/node_modules/request");

socket = require(__dirname + "/node_modules/socket.io");

ejs = require(__dirname + "/node_modules/ejs");

path = require(__dirname + "/node_modules/path");

partials = require(__dirname + "/node_modules/express-partials");

fs = require("fs");

/* my modules
*/


Log = require(__dirname + "/helpers/log");

Watcher = require(__dirname + "/helpers/watcher");

Port = require(__dirname + "/helpers/port");

Timeline = require(__dirname + "/controllers/timeline");

Upload = require(__dirname + "/controllers/upload");

Calendar = require(__dirname + "/controllers/calendar");

Index = require(__dirname + "/controllers/index");

Note = require(__dirname + "/controllers/note");

/* Application Configuration
*/


config = {
  name: "",
  location: __dirname + "/../",
  paths: {
    data: "data/",
    "public": "src/public/",
    views: "src/views/"
  }
};

config.location = fs.realpathSync(config.location);

config.name = fs.realpathSync(config.location + "../../../../").replace(/.*[\\\/](.+?)$/, "$1");

_ref = config.paths;
for (key in _ref) {
  value = _ref[key];
  config.paths[key] = path.join(config.location, value);
}

/*
 * node実行時に-dオプションが渡されていたらディベロップメントモード.
 * node server.js -d
*/


isDevelopMode = function() {
  return (process.argv.length > 2) && (process.argv[2] === "-d");
};

log = new Log(isDevelopMode());

/* app
*/


app = express();

app.use(require('connect').bodyParser());

app.use(partials());

/* Template Setting
*/


app.engine('.html', ejs.__express);

app.set('view engine', 'ejs');

app.set('views', config.paths.views);

/* localhost以外からのアクセスは400で応答
*/


app.use(function(req, res, next) {
  var hostname, _ref1;
  hostname = req.headers.host;
  if ((hostname != null ? (_ref1 = hostname.match(/^localhost/)) != null ? _ref1.length : void 0 : void 0) != null) {
    return next();
  } else {
    return res.send(400);
  }
});

/* API
*/


index = new Index(config);

upload = new Upload(config);

timeline = new Timeline(config);

calendar = new Calendar(config);

note = new Note(config);

index.bind(app);

upload.bind(app);

timeline.bind(app);

calendar.bind(app);

note.bind(app);

app.get("/exit", function(req, res) {
  console.log("httpからサーバーが終了されました");
  return process.exit(0);
});

process.on('uncaughtException', function(err) {
  if (err.errno === 'EADDRINUSE') {
    return request(url + "exit", function(error, response, body) {
      return startListen();
    });
  }
});

server = require('http').createServer(app);

io = socket.listen(server);

watcher = new Watcher(io, config.paths.data);

watcher.start();

port = (new Port(50000, __dirname)).port;

/**
 * expressのインスタンスではなく
 * httpServerのインスタンスでlistenすること！
 * そうしないとsocket.io.jsが404になる.
*/


startListen = function() {
  return server.listen(port);
};

startListen();

url = "http://localhost:" + port + "/";

log.echo(url);
