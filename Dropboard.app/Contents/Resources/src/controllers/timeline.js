// Generated by CoffeeScript 1.3.3
var Q, Reader, Rest, Timeline, fs,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Rest = require("./rest");

Reader = require("../helpers/reader");

Q = require("../helpers/array-query");

fs = require("fs");

Timeline = (function(_super) {

  __extends(Timeline, _super);

  function Timeline(appConfig) {
    this.get = __bind(this.get, this);

    this.post = __bind(this.post, this);
    Timeline.__super__.constructor.call(this, "timeline", appConfig);
    this.ext = "";
  }

  Timeline.prototype.post = function(req, res) {
    var data, fileName;
    data = req.body;
    if (this.isSet(data.name && this.isSet(data.date && this.isSet(data.text)))) {
      fileName = this.digest(data);
      return fs.writeFile(fileName, JSON.stringify(data), function(err) {
        if (err) {
          console.log(err);
        }
        return res.send(!err);
      });
    }
  };

  Timeline.prototype.get = function(req, res) {
    var _this = this;
    return res.format({
      json: function() {
        var all, data, page, per, sorted;
        page = parseInt(req.query.page);
        per = parseInt(req.query.per);
        all = _this.reader.get().all();
        sorted = Q(all).sortByDate();
        data = Q(sorted).page(page, per);
        return res.send(data);
      },
      html: function() {
        return res.render(_this.name, {
          title: _this.appConfig.name
        });
      }
    });
  };

  Timeline.prototype.digest = function(data) {
    var fileCount, fileName;
    fileName = this.dataPath + this.shorten(data.name, 10) + "「" + this.shorten(data.text, 20) + "」" + this.ext;
    if (fs.existsSync(fileName)) {
      fileName += ".0";
    }
    fileCount = 0;
    while (fs.existsSync(fileName)) {
      fileName = fileName.replace(/\.[0-9]+$/, "." + (++fileCount));
    }
    return fileName;
  };

  Timeline.prototype.isSet = function(arg) {
    return (arg != null) && arg !== "";
  };

  Timeline.prototype.shorten = function(str, length) {
    var postfix, s;
    s = str.replace(/\n|\\|\/|\:|\*|\?|\"|\<|\>|\|\.|/g, "");
    postfix = "...";
    if (s.length > length) {
      if (length > postfix.length) {
        return s.slice(0, length - postfix.length) + postfix;
      } else {
        return s.slice(0, length);
      }
    } else {
      return s;
    }
  };

  return Timeline;

})(Rest);

module.exports = Timeline;
